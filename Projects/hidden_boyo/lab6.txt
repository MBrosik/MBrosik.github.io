Zad. 1
	a) Wygenerowanie kluczy prywatnych i publicznych;

		1. W terminalu piszemy komendę ssh-keygen
		2. Utworzyły się dwa pliki '~/.ssh/id_rsa' (klucz prywatny) oraz '~/.ssh/id_rsa.pub' (klucz publiczny)
	
	b) Logowanie się bez podawania hasła

		1. Skopiowanie klucza publicznego z '~/.ssh/id_rsa.pub' do katalogu na serwerze w lokalizacji '~/.ssh/authorized_keys'
		2. Dla bezpieczeństwa można ustawić, aby tylko właściciel miał dostęp do pliku. Komenda: chmod 600 ~/.ssh/authorized_keys

Zad. 2
	a) Co robi polecenie mkdir -p a/{b,c,d}
		1. Polecenie tworzy katalogi ./a/b ./a/c ./a/d. Opcja -p powoduje utworzenie katalogów nie istniejących
	b) Dlaczego polecenie zwraca ls -ld a | cut -f 2 -d' '   5
		1. Określa liczbę linków symbolicznych, a jest ich 4, ostatni brakujący jest samym katalogiem a
		2. Linki znajdują się:
			a) w lokalizaji ./a i jest on oznaczony "." (current folder)
			b) w każdych podfolderach jako ".." (previous folder)
Zad. 3
	a) Co oznacza komenda ln -sf `pwd`/a a/b/link:
		- Komenda ta tworzy link symboliczny 
		- Opcja -s oznacza, że ma zostać utworzony link symboliczny, a opcja -f oznacza, że link ma zostać nadpisany, jeśli już istnieje.
		- `pwd`/a jest to lokalizacja docelowa dla linku 
		- a/b/link jest to lokalizacja linku gdzie link będzie utworzony
	b) cd a/b/link/b/link/b
		- jestem ciągle w katalogu a/b
		- po wpisaniu pwd pokaże mi ścieżkę taka jaka jest w terminalu
		- po wpisaniu pwd -P pokaże rzeczywistą ścieżkę, czyli bez pośrednictwa linków
	

Zad 4
	a) umask 077 - pełne uprawnienia dla wszystkich, brak uprawnień dla grupy i wszystkich
	b) Aby działało po ponownym zalogowaniu należy dopisać tą komendą do pliku ~/.bashrc lub ~/.bash_profile

Zad 5
	a) chmod 711 ~
	b) mkdir ~/pub-r
	c) chmod 755 ~/pub-r

Zad 6


#!/bin/bash

# Sprawdzanie czy liczba argumentow jest rozna od 1
if [ "$#" -ne 1 ]; then
	echo "Incorrect count of arguments. Use instead: useralert [username]"
	exit 1
fi

myUSername="$(whoami)"
user=$1

while true; do
	if who | grep -q "$user"; then
		#wall User $user logged in
		
		for pts in /dev/pts/*; do
			if ls -ld $pts | grep -q "$(whoami)"; then
				echo -e "User $user logged in" > $pts;
			fi
		done
		while who | grep -q "$user"; do
			sleep 1
		done
	fi
	sleep 1
done


